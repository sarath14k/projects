what is locks
------------
Locks in C++ are synchronization primitives used to ensure that multiple threads do not access 
shared resources concurrently in an unsafe manner

eg : mutex =>   lock_guard
                unique_lock

    A mutex (mutual exclusion) is a simple lock that ensures only one thread can access a 
    resource at a time. A mutex is a binary semaphore that can be locked and unlocked.

what is threads
---------------
Threads are lightweight processes that can run concurrently with other threads in a program.

what is semaphore
-----------------
A semaphore is a variable that controls the access to a common resource by multiple threads. It
is used to implement synchronization in a program.


multithreading and multiprocessing
----------------------------------
multithreading, where multiple threads run within a single process and share the same memory space, 

multiprocessing, where multiple processes run in parallel, each with its own memory space.
multiprocessing involves separate processes, each with its own memory space. This can be advantageous 
for tasks that require high isolation or involve heavy computations.

what is memory leak
-------------------
Memory leak is a situation where the program allocates memory but does not release it.
This can lead to a gradual decrease in available memory, which may eventually cause the program or system
to crash or become unresponsive

Failure to delete allocated memory: Forgetting to use delete or delete[] for memory allocated with new or new[].
Not releasing resources: Not calling appropriate deallocation functions for resources like file handles 
or network sockets.

eg: 

#include <iostream>
void memoryLeakExample() {
    int* ptr = new int[10]; // Allocating memory
    // No delete[] ptr; // Forgetting to deallocate memory
}

int main() {
    for (int i = 0; i < 1000000; ++i) {
        memoryLeakExample();
    }
    return 0;
}

what is smart pointer
---------------------
Smart pointers are a type of C++ object that automatically manage memory for you. They are used to
avoid memory leaks and dangling pointers.


what is the difference between shared pointer and unique pointer
-----------------------------------------------------------------
Shared pointer: A shared pointer is a smart pointer that manages the lifetime of an object by keeping track
of the number of references to the object. When the last reference to the object is destroyed, the
object is automatically deleted.

Unique pointer: A unique pointer is a smart pointer that manages the lifetime of an object by ensuring that
only one pointer can own the object at a time. When the last pointer to the object is destroyed
the object is automatically deleted.

what is the use of shared pointer
---------------------------------
Shared pointers are useful when multiple threads need to access the same object, as they ensure that the object 
is not deleted until all threads have finished using it. They are also useful when an object needs to be shared 
between different parts of a program, as they ensure that the object is not deleted until all parts of the program
have finished using it.

what is the use of unique pointer
---------------------------------
Unique pointers are useful when an object needs to be owned by only one thread or part of a program
at a time, as they ensure that the object is not deleted until the last pointer to the object
is destroyed. 

we have multiple threads which can read and write using global variables, is it safe ?
---------------------------------------------------------------------------------------
No, it is not safe to have multiple threads reading and writing to global variables, as there is
no guarantee that the threads will access the variables in a consistent order. This can lead to
data races, where two threads try to access the same variable at the same time, resulting in
undefined behavior.

To safely access and modify global variables from multiple threads, you can use synchronization mechanisms such as:

Mutexes:

Use std::mutex to ensure that only one thread can access the critical section of code at a time.
Locks:

std::lock_guard, std::unique_lock, or std::shared_lock can help manage mutexes more conveniently.

what is makefile in c++ and what is the use ?
---------------------------------------------
Makefile is a file that contains instructions for compiling and linking C++ programs. It is used to
automate the process of building a program, by specifying the dependencies between the source files
and the target executable or library. This allows you to easily rebuild the program when any of the
source files change, without having to manually recompile all the files.

which linux command is used to search text inside a file ?
-----------------------------------------------------------
The grep command is used to search for a pattern in a file or files. It can be used
to search for a specific word or phrase, or to search for a regular expression. The syntax for
grep is:
grep [options] pattern [file(s)]
where [options] are optional arguments that modify the behavior of grep, [pattern] is the
string or regular expression to search for, and [file(s)] is the name of the file or
files to search in.

eg: grep -i "example" file.txt
    grep -r "example" .


which linux command is used find the files inside a folder and its subfolders ?
--------------------------------------------------------------------------------
The find command is used to search for files in a directory tree. It can be used to search
for files with a specific name, or to search for files with a specific type or size. The
syntax for find is:
find [path] [options] [expression]
where [path] is the path to the directory to search in, [options] are optional arguments
that modify the behavior of find, and [expression] is the search expression.

eg: find . -name "example.txt"

which libraries are used to create rest api s in c++ ?
------------------------------------------------------
The Boost library is a popular choice for creating REST APIs in C++. It provides a wide range
of features for building web services, including support for JSON, XML, and other data formats.

how the service calling and communication is happening between front end and middleware ?
------------------------------------------------------------------------------------------
The communication between the front end and middleware is typically handled through a
REST API. The front end sends a request to the middleware, which processes the request and
returns a response. The response can be in the form of JSON, XML, or other data formats

is it a client - server model ?
---------------------------------
Yes, the communication between the front end and middleware is typically handled through a
REST API, which is a client-server model. The front end sends a request to the middleware,
which processes the request and returns a response. The response can be in the form of JSON,
XML, or other data formats.

what is dynamic memory ?
-----------------------
Dynamic memory is memory that is allocated and deallocated at runtime. It is used to
allocate memory for objects that are created and destroyed during the execution of a program.

eg :
int *ptr = new int[10];
delete[] ptr;

dynamic memory allocation happening in heap 

int* fun() {
    int* var = new int(10); // Dynamically allocate a single integer initialized to 10
    return var;             // Return the pointer to the allocated integer
}

int main() {
    int * value = fun(); // Call the function and get the allocated integer

    // Use the allocated integer
    std::cout << "Value: " << *value << std::endl; // Output: Value: 10

    delete value; // Deallocate the memory to avoid memory leaks

    return 0;
}

deallocates the memory to prevent memory leaks.

what is static memory ?
-----------------------
Static memory is memory that is allocated and deallocated at compile time. It is used to
allocate memory for objects that are created and destroyed during the execution of a program.

eg:
int arr[10];

static memory allocation is happening in stack

#include <iostream>

int* fun() {
    static int var = 10; // static variable
    return &var;         // return address of the static variable
}

int main() {
    int* value1 = fun(); // Call the function and get the pointer
    std::cout << "Value: " << *value1 << std::endl; // Output: Value: 10
    return 0;
}

No need for manual memory management (new and delete).



big endian and small endian
-------------------------------
Big Endian: The most significant byte (MSB) is stored first.

Let's consider a 32-bit value 0x12345678. In big-endian:

Address  |  Value
---------|---------
0x0000   |  12
0x0001   |  34
0x0002   |  56
0x0003   |  78

Historically used in older mainframe systems and by some network protocols (e.g., TCP/IP), 
as it is more natural for humans to read hexadecimal numbers in big-endian order.


Small Endian: The least significant byte (LSB) is stored first.
Let's consider a 32-bit value 0x12345678. In small-endian:

Address  |  Value
---------|---------
0x0000   |  78
0x0001   |  56
0x0002   |  34
0x0003   |  12


Commonly used by x86 architecture (Intel, AMD processors) as it's efficient for certain CPU operations 
like memory addressing.


Namespace vs Class in Programming:
---------------------------------

Namespace:
=========
A namespace is a container that holds a set of related identifiers (such as classes, functions, variables)
to avoid naming conflicts and to organize code logically. Namespaces do not represent objects or behavior,
they simply provide a way to logically group code elements.

Purpose: Organizes code and avoids naming collisions.
Does not define behavior: A namespace does not contain any executable logic, unlike classes.
Grouping mechanism: It’s essentially a "label" used to logically group related code.

namespace MathUtilities {
    int add(int a, int b) {
        return a + b;
    }
}

Here, MathUtilities is a namespace that contains the add function. If another namespace has a similar
function, there won't be a conflict as long as they belong to different namespaces.

int result = MathUtilities::add(5, 3);


Key Features of a Namespace:
Code Organization: Makes it easier to organize large codebases by grouping related functionality.

Prevents Naming Conflicts: Prevents clashes when different parts of a program (or different libraries) 
use the same identifier names (functions, variables, etc.).

Static Context: Namespaces don’t have instances or objects; they are static.

Class:
=======
A class is a blueprint for creating objects in object-oriented programming. 
It defines properties (fields/attributes) and behaviors (methods/functions) for objects.

Purpose: Defines data structure and behavior.
Instantiable: You can create objects (instances) from a class.
Encapsulates data and behavior: A class encapsulates related data and functions into a single unit.
Supports inheritance: Classes can inherit from other classes, allowing code reuse and polymorphism.


class Calculator {
public:
    int add(int a, int b) {
        return a + b;
    }
};

Calculator calc;
int result = calc.add(5, 3);

Key Features of a Class:

Defines Data and Behavior: A class is a template for objects and contains methods and attributes.

Instance Creation: Classes are instantiable, meaning you can create objects based on them.

Supports Object-Oriented Principles: Classes support concepts like inheritance, encapsulation, 
and polymorphism

Namespace: Use namespaces to organize and group logically related code, 
especially in large projects or libraries.

Class: Use classes to define objects with properties and behaviors and to implement 
object-oriented principles