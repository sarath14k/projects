Redis (Remote Dictionary Server) is an open-source, in-memory key-value store that works as a database, cache, and message broker. It is known for its high performance, low latency, and ability to handle a large volume of operations per second. Redis stores data in memory rather than on disk, which enables fast read and write operations, making it suitable for real-time applications.

Key Concepts of Redis:
In-Memory Storage:

Redis stores all data in RAM, making it extremely fast. However, it can also persist data to disk to avoid data loss.
Key-Value Data Model:

Redis operates as a key-value store, where each key is unique, and the associated value can be a wide range of data types.
Data Structures:

Redis supports various data types such as:
String: The most basic type, which stores simple values like integers, floats, or binary data.
List: A collection of ordered strings (like an array).
Set: An unordered collection of unique strings.
Hash: A collection of key-value pairs (like a dictionary or map).
Sorted Set: Similar to a set, but with an associated score for each element, allowing sorted access.
Bitmap, HyperLogLog, Stream: Specialized data types for unique use cases like bit-level operations, counting unique items, and handling streams of data.
Persistence: Redis offers two forms of persistence:

Snapshotting (RDB): Periodic snapshots of data are written to disk at regular intervals.
Append-Only File (AOF): Every write operation is logged in an append-only file, providing more durability. The file is compacted periodically.
Replication:

Redis supports master-slave replication, where data is copied from the master node to one or more slave nodes. This provides data redundancy, failover, and load distribution for read operations.
Pub/Sub Messaging:

Redis includes a lightweight publish/subscribe messaging system, allowing clients to publish messages on channels, while other clients can subscribe to those channels and receive messages in real-time.
Scripting with Lua:

Redis allows Lua scripting to perform atomic operations involving multiple Redis commands. Scripts are executed in isolation, ensuring no other commands are executed concurrently.
Transactions:

Redis supports transactions using the MULTI, EXEC, and WATCH commands. These allow multiple operations to be executed in a single atomic transaction.
Eviction Policies:

Redis provides several eviction policies when memory limits are reached, such as:
No eviction (error when memory limit is reached).
LRU (Least Recently Used): Removes the least recently used keys.
LFU (Least Frequently Used): Removes the least frequently accessed keys.
Random eviction: Removes random keys.
How Redis Works:
Client-Server Model: Redis operates on a simple client-server model where clients connect to the Redis server, send commands, and receive responses. The client can be any application or script that communicates with Redis over a TCP connection or Unix socket.


Handling Commands: Redis commands are simple, human-readable commands. For example:

SET key value: Stores the value associated with the key.
GET key: Retrieves the value associated with the key.
INCR key: Increments the value of a key by 1.
LPUSH key value: Pushes a value onto the left side of a list.
Redis uses its own RESP (Redis Serialization Protocol) to process commands and send responses to clients.

In-Memory Data Storage: When a client sends a SET command, the Redis server stores the key-value pair in memory. When a GET command is issued, Redis quickly retrieves the value from memory, ensuring low-latency access.

Persistence Mechanism: Redis writes data to disk depending on the persistence strategy:

RDB snapshots: Redis periodically creates snapshots of data and saves them to disk.
AOF (Append-Only File): Redis logs every write operation to an AOF file and plays back the log on restart to restore the dataset.
Data Access: Redis uses a single-threaded event loop to handle requests. This may sound like a limitation, but because all operations are performed in memory and Redis is highly optimized, it can handle tens of thousands of requests per second per core.

Replication: In a replicated setup, the master Redis instance propagates changes to one or more replica (slave) instances. The slaves can be used for read-only operations, distributing the read load and ensuring high availability.

Sharding: Redis can be distributed across multiple servers using sharding. Each server holds a portion of the data, enabling horizontal scaling.

Eviction and Cache Management: Redis is commonly used as a cache. When used as a cache, Redis can be configured with eviction policies to automatically free up memory by removing the least-used or least-recently-used data when the memory limit is reached.

Common Use Cases for Redis:
Caching: Redis can be used to cache frequently accessed data to reduce load on databases or other resources.
Session Storage: Redis is often used to store session data for web applications, given its speed and simplicity.
Leaderboards and Counting: Redisâ€™ sorted sets make it easy to implement real-time leaderboards and counters.
Pub/Sub Messaging: Redis is widely used for real-time messaging in applications like chat systems, notifications, and live updates.
Queues and Task Management: Redis can be used to implement message queues and task scheduling.
Example of Basic Redis Usage:
1. Set and Get Values:
cpp
Copy code
SET user:1001 "Shameem"
GET user:1001
2. Working with Lists:
cpp
Copy code
LPUSH users "Diksha"
LPUSH users "Mohammed"
LRANGE users 0 -1  // Retrieve all users from the list
3. Pub/Sub Example:
cpp
Copy code
// Publisher
PUBLISH channel1 "Hello, World!"

// Subscriber
SUBSCRIBE channel1
Conclusion:
Redis is a powerful, in-memory database capable of handling large volumes of data with high performance. Its flexible data structures, persistence options, and rich set of features make it suitable for a wide variety of real-time use cases, from caching and session management to message brokering and beyond

REDIS API
=========

Redis offers an API to interact with the Redis server through various programming languages, allowing developers to perform operations such as setting, getting, and manipulating data. The Redis API can be accessed using different clients (libraries) depending on the programming language you're using. Below is an overview of common Redis operations and how to interact with Redis using its API.

Redis API Operations
Redis commands typically follow a straightforward structure of key-value operations, along with specialized commands for different data structures such as lists, sets, hashes, etc.

Basic Commands
SET (Store a key-value pair)

Command: SET key value
Description: Stores a key with a given value.
bash
Copy code
SET user:1 "Shameem"
GET (Retrieve a value by key)

Command: GET key
Description: Retrieves the value associated with the key.
bash
Copy code
GET user:1
DEL (Delete a key)

Command: DEL key
Description: Deletes the key-value pair from Redis.
bash
Copy code
DEL user:1
EXISTS (Check if a key exists)

Command: EXISTS key
Description: Checks if a given key exists in the database.
bash
Copy code
EXISTS user:1
INCR/DECR (Increment/Decrement a value)

Command: INCR key or DECR key
Description: Increments or decrements the value stored at the key (must be an integer).
bash
Copy code
INCR counter
DECR counter
List Operations
LPUSH (Insert into the left of a list)

Command: LPUSH key value
Description: Adds an element to the left of the list stored at key.
bash
Copy code
LPUSH users "Shameem"
LRANGE (Get elements from a list)

Command: LRANGE key start stop
Description: Returns elements between the start and stop positions of a list.
bash
Copy code
LRANGE users 0 -1
LPOP (Pop an element from the left of a list)

Command: LPOP key
Description: Removes and returns the first element of the list stored at key.
bash
Copy code
LPOP users
Hash Operations
HSET (Set a field in a hash)

Command: HSET key field value
Description: Sets a field in the hash stored at key.
bash
Copy code
HSET user:1001 name "Shameem"
HGET (Get a field from a hash)

Command: HGET key field
Description: Gets the value associated with a field in the hash.
bash
Copy code
HGET user:1001 name
HGETALL (Get all fields from a hash)

Command: HGETALL key
Description: Returns all fields and values in a hash.
bash
Copy code
HGETALL user:1001
Set Operations
SADD (Add a member to a set)

Command: SADD key member
Description: Adds a member to a set.
bash
Copy code
SADD colors "red"
SMEMBERS (Get all members of a set)

Command: SMEMBERS key
Description: Returns all the members of the set.
bash
Copy code
SMEMBERS colors
Sorted Set (ZSET) Operations
ZADD (Add a member to a sorted set with a score)

Command: ZADD key score member
Description: Adds a member to a sorted set, or updates its score if it exists.
bash
Copy code
ZADD leaderboard 100 "Shameem"
ZRANGE (Get members in a range by rank)

Command: ZRANGE key start stop [WITHSCORES]
Description: Returns a range of members in a sorted set by rank.
bash
Copy code
ZRANGE leaderboard 0 -1 WITHSCORES
Pub/Sub (Publish/Subscribe)
PUBLISH (Publish a message to a channel)

Command: PUBLISH channel message
Description: Publishes a message to the specified channel.
bash
Copy code
PUBLISH notifications "Hello World"
SUBSCRIBE (Subscribe to a channel)

Command: SUBSCRIBE channel
Description: Subscribes to a channel, receiving messages when they are published.
bash
Copy code
SUBSCRIBE notifications




#include <hiredis/hiredis.h>
#include <iostream>

int main() {
    redisContext *c = redisConnect("127.0.0.1", 6379);
    if (c != NULL && c->err) {
        std::cout << "Error: " << c->errstr << std::endl;
        return 1;
    }

    redisReply *reply = (redisReply*) redisCommand(c, "SET user:1001 %s", "Shameem");
    freeReplyObject(reply);

    reply = (redisReply*) redisCommand(c, "GET user:1001");
    std::cout << "GET user:1001: " << reply->str << std::endl;
    freeReplyObject(reply);

    redisFree(c);
    return 0;
}
