Git and CI/CD Pipelines
Git and CI/CD (Continuous Integration/Continuous Deployment) pipelines are crucial tools and methodologies in modern software development, enabling efficient version control and automated software delivery.

Git
Git is a distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Key concepts and commands include:

Repository (Repo): A storage space where your projectâ€™s files and history are kept. Local repositories are on your computer, while remote repositories are hosted on servers like GitHub, GitLab, or Bitbucket.
Commit: A snapshot of your project files at a specific point in time. Commits form the history of your project.
Branch: A lightweight movable pointer to a commit. Branches are used to develop features, fix bugs, or experiment in isolation from the main codebase.
Merge: The process of combining changes from different branches.
Pull Request (PR): A method of submitting contributions to a project. After the changes are reviewed, the PR can be merged into the main branch.
Common Git Commands:

git init: Initializes a new Git repository.
git clone <repo-url>: Clones an existing repository.
git add <file>: Stages files for commit.
git commit -m "message": Commits staged files with a message.
git push: Pushes commits to a remote repository.
git pull: Fetches and integrates changes from a remote repository.
git branch: Lists branches.
git checkout <branch>: Switches to a branch.
git merge <branch>: Merges another branch into the current branch.
CI/CD Pipelines
CI/CD is a method to frequently deliver apps to customers by introducing automation into the stages of app development. The main concepts include:

Continuous Integration (CI): The practice of automatically integrating code changes from multiple contributors into a shared repository several times a day. CI involves automated testing to ensure the integrated code is error-free.
Continuous Deployment (CD): The practice of automatically deploying every change that passes all stages of your production pipeline to customers. This makes sure that you can release new features and bug fixes quickly and safely.
CI/CD Pipeline Stages
Source Stage: Code is pushed to the repository.
Build Stage: The application is built from the source code.
Test Stage: Automated tests are run to validate the build.
Deploy Stage: The application is deployed to production or a staging environment.
Monitor Stage: The deployed application is monitored for performance and errors.
Example CI/CD Tools
Jenkins: An open-source automation server for building, testing, and deploying.
GitLab CI/CD: Integrated with GitLab repositories for CI/CD.
Travis CI: A hosted continuous integration service used to build and test software projects.
CircleCI: A modern continuous integration and continuous deployment (CI/CD) platform.



git fecth vs pull
==================
both git fetch and git pull are used to synchronize your local repository with a remote repository, but they operate differently.

git fetch:
----------
What it does: Downloads commits, files, and references from a remote repository into your local repository without modifying your working directory. It only updates your remote tracking branches (like origin/master).

Usage: It allows you to see what changes exist on the remote before deciding to merge them into your local branch.

Key Points:

It does not change your working directory or current branch.
It only updates the reference to the remote branch.
After fetching, you can manually inspect the changes and decide when and how to incorporate them into your local branch (e.g., by using git merge).

git diff origin/main
git merge origin/main

git pull:
---------
 Downloads commits and immediately integrates them into your current working branch. It's a combination of git fetch followed by git merge or git rebase, meaning it both downloads and attempts to integrate (merge or rebase) the changes automatically.


Key Points:

It updates both your local references and your working directory in one step.
Automatic merge: After pulling, Git automatically tries to merge changes from the remote branch into your current branch.
If there are merge conflicts, you will need to resolve them manually.