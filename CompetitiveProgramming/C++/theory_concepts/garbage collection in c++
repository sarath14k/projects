In C++, garbage collection is not built-in as it is in languages like Java or C#. Instead, C++ relies 
on deterministic resource management,
 primarily through RAII (Resource Acquisition Is Initialization) and smart pointers. Here's an overview of how garbage collection and 
 memory management are typically handled in C++:

1. Manual Memory Management
C++ provides direct control over memory allocation and deallocation through the new and delete operators.

Allocation: int* ptr = new int;
Deallocation: delete ptr;

While this gives fine-grained control, it also introduces the risk of memory leaks and dangling pointers if not managed carefully.

2. RAII (Resource Acquisition Is Initialization)
RAII is a programming idiom that binds the lifecycle of a resource (like memory, file handles, etc.) to the lifetime of an object. 
This is often used with smart pointers.

3. Smart Pointers
C++11 introduced smart pointers in the Standard Library, which help manage the lifetime of dynamically allocated objects.

std::unique_ptr: Ensures sole ownership of a dynamically allocated object. The object is automatically deleted when the unique_ptr goes 
out of scope.

std::unique_ptr<int> ptr(new int(10)); 
unique_ptr<int> ptr = make_unique<int>(10);

std::unique_ptr<int> ptr2 = std::move(ptr); // ptr2 now owns the object, and ptr is left in a valid but unspecified state.

std::shared_ptr: Allows multiple pointers to share ownership of an object. The object is deleted when the last shared_ptr pointing to
it is destroyed.

shared_ptr<int> ptr(new int(10));
std::shared_ptr<int> ptr1 = std::make_shared<int>(10);
std::shared_ptr<int> ptr2 = ptr1; // shared ownership


std::weak_ptr: Acts as a non-owning reference to an object managed by a shared_ptr. It is used to break circular references.


std::weak_ptr<int> weakPtr = ptr1;

In summary, C++ relies on deterministic resource management through RAII and smart pointers, rather than garbage
collection. This approach requires more manual effort but provides greater control and efficiency.

4. Custom Garbage Collection Libraries
While not common, there are third-party libraries that provide garbage collection for C++. Some examples include:

Boehm-Demers-Weiser garbage collector: A conservative garbage collector that can be used with C and C++ programs.

cpp
Copy code
#include <gc/gc.h>
int* ptr = (int*)GC_MALLOC(sizeof(int));
Microsoft's C++/CLI: Provides garbage collection but is specific to the .NET environment.

Example with Smart Pointers
Hereâ€™s a simple example demonstrating the use of std::unique_ptr and std::shared_ptr:
------------------------------------------------------------------------------------
#include <iostream>
#include <memory>

class Resource {
public:
    Resource() { std::cout << "Resource acquired\n"; }
    ~Resource() { std::cout << "Resource destroyed\n"; }
    void sayHi() { std::cout << "Hi!\n"; }
};

void uniquePointerExample() {
    std::unique_ptr<Resource> res = std::make_unique<Resource>();
    res->sayHi();
    // Resource will be automatically destroyed here
}

void sharedPointerExample() {
    std::shared_ptr<Resource> res1 = std::make_shared<Resource>();
    shared_ptr<Resource> res3(new Resource);
    {
        std::shared_ptr<Resource> res2 = res1;
        res2->sayHi();
        // Resource will not be destroyed here because res1 still owns it
    }
    // Resource will be automatically destroyed here as the last shared_ptr owning it goes out of scope
}

int main() {
    uniquePointerExample();
    sharedPointerExample();
    return 0;
}


-------
Summary
-------
C++ does not have built-in garbage collection.
Memory management is typically done manually with new and delete, but this approach can be error-prone.
Smart pointers (std::unique_ptr, std::shared_ptr, std::weak_ptr) provide safer and more automatic memory management.
Third-party libraries and specific frameworks can introduce garbage collection if needed.