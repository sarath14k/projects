Have the function DivisionStringified(num1,num2) take both parameters being passed, 
divide num1 by num2, and return the result as a string with properly formatted commas.
 If an answer is only 3 digits long, return the number with no commas (ie. 2 / 3 should output "1"). 
 For example: if num1 is 123456789 and num2 is 10000 the output should be "12,346".

#include <iostream>
#include <string>
#include <cmath>
using namespace std;

string DivisionStringified(int num1, int num2) {
   
    int res = round(static_cast<double>(num1) / num2);
    string formattedResult;

    int count = 0;
    do {
        if (count % 3 == 0 && count != 0) {
            formattedResult = ',' + formattedResult;
        }
        formattedResult = char('0' + (res % 10)) + formattedResult;
        res /= 10;
        count++;
    } while (res != 0);

    return formattedResult;
}


int main(void) { 
   
  // keep this function call here
  cout << DivisionStringified(coderbyteInternalStdinFunction(stdin));
  return 0;
    
}





For example strArr may be: ["4","3:1","2:2","1:2","0:1"]. Your goal is to return the index of the starting gas station that will allow you to travel around the whole route once, otherwise return the string impossible. For the example above, there are 4 gas stations, and your program should return the string 1 because starting at station 1 you receive 3 gallons of gas and spend 1 getting to the next station. Then you have 2 gallons + 2 more at the next station and you spend 2 so you have 2 gallons when you get to the 3rd station. You then have 3 but you spend 2 getting to the final station, and at the final station you receive 0 gallons and you spend your final gallon getting to your starting point. Starting at any other gas station would make getting around the route impossible, so the answer is 1. If there are multiple gas stations that are possible to start at, return the smallest index (of the gas station). N will be >= 2.
Examples
Input: {"4","1:1","2:2","1:2","0:1"}
Output: impossible
Input: {"4","0:1","2:2","1:2","3:1"}
Output: 4



#include <iostream>
#include <vector>
#include <string>
#include <sstream>

using namespace std;

int GasStation(string strArr [], int arrLength) {
    int N = stoi(strArr [0]); 
    int totalGas = 0;
    int totalCost = 0;
    int tank = 0;
    int startStation = 0;

   
    for (int i = 1; i <= N; ++i) {
        stringstream ss(strArr [i]);
        string segment;
        vector<string> parts;
        while (getline(ss, segment, ':')) {
            parts.push_back(segment);
        }
        int gas = stoi(parts[0]);
        int cost = stoi(parts[1]);
        totalGas += gas;
        totalCost += cost;
        tank += gas - cost;
        
        if (tank < 0) {
            tank = 0;
            startStation = i;
        }
    }

    if (totalGas < totalCost) {
        return -1; 
    }

    return startStation;
}

int main(void) { 
   
  
  string strArr [] = coderbyteInternalStdinFunction(stdin);
  int arrLength = sizeof(strArr ) / sizeof(*strArr );
  int result  = GasStation(strArr , arrLength);
  if (result == -1){
    cout << "impossible" << endl;
  }else{
    cout << result << endl;
  }
  return 0;
    
}