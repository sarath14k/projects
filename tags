!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AI	ChessAI/include/ai.h	/^class AI{$/;"	c
AI	ChessAI/src/ai.cpp	/^AI::AI(ChessBoard* board, int searchDepth) $/;"	f	class:AI
AI_H	ChessAI/include/ai.h	2;"	d
BACKLOG_SIZE	ThreadPool/include/Constants.h	/^    const std::string BACKLOG_SIZE = "backlog_size";$/;"	m	namespace:constants
BIN_DIR	AlgorithmVisualizer/Makefile	/^BIN_DIR = bin$/;"	m
BIN_DIR	ThreadPool/Makefile	/^BIN_DIR = bin$/;"	m
BIN_DIR	compression/Makefile	/^BIN_DIR = bin$/;"	m
BIN_DIR	mediaPlayer/Makefile	/^BIN_DIR = bin$/;"	m
BISHOP_H	ChessAI/include/bishop.h	2;"	d
BUFFER_SIZE	ThreadPool/include/Constants.h	/^    const std::string BUFFER_SIZE = "buffer_size";$/;"	m	namespace:constants
Bishop	ChessAI/include/bishop.h	/^class Bishop : public ChessPiece {$/;"	c
CC	ThreadPool/Makefile	/^CC = g++$/;"	m
CFLAGS	ThreadPool/Makefile	/^CFLAGS = -Wall -g$/;"	m
CHESSBOARD_H	ChessAI/include/chessboard.h	2;"	d
CHESSPIECE_H	ChessAI/include/chesspiece.h	2;"	d
CLIENT	ThreadPool/include/Constants.h	/^    const std::string CLIENT = "client";$/;"	m	namespace:constants
CLIENT_H	ThreadPool/include/Client.h	2;"	d
CONFIG	ThreadPool/Makefile	/^CONFIG = config.yaml$/;"	m
CONFIG_FILE_PATH	ThreadPool/include/Constants.h	/^    const std::string CONFIG_FILE_PATH = "config\/config.yaml"; \/\/ Path to the configuration file$/;"	m	namespace:constants
CONFIG_H	ThreadPool/include/Config.h	2;"	d
CONSTANT_H	ThreadPool/include/Constants.h	2;"	d
CXX	AlgorithmVisualizer/Makefile	/^CXX = g++$/;"	m
CXX	compression/Makefile	/^CXX = g++$/;"	m
CXX	encryptor/Makefile	/^CXX = g++$/;"	m
CXX	mediaPlayer/Makefile	/^CXX = g++$/;"	m
CXXFLAGS	AlgorithmVisualizer/Makefile	/^CXXFLAGS = -std=c++17 -Wall$/;"	m
CXXFLAGS	compression/Makefile	/^CXXFLAGS = -std=c++17 -Wall -Iinclude$/;"	m
CXXFLAGS	encryptor/Makefile	/^CXXFLAGS = -std=c++11 -Wall -Wextra -I\/usr\/include\/FL -I\/usr\/include$/;"	m
CXXFLAGS	mediaPlayer/Makefile	/^CXXFLAGS = -I\/usr\/include -Iinclude -std=c++11$/;"	m
ChessBoard	ChessAI/include/chessboard.h	/^class ChessBoard {$/;"	c
ChessPiece	ChessAI/include/chesspiece.h	/^class ChessPiece {$/;"	c
Client	ThreadPool/include/Client.h	/^class Client {$/;"	c
Compare	compression/include/Huffman.h	/^struct Compare {$/;"	s
Config	ThreadPool/include/Config.h	/^class Config {$/;"	c
Config	ThreadPool/src/Config.cpp	/^Config::Config(const std::string& filename) {$/;"	f	class:Config
EPOLL_H	ThreadPool/include/Epoll.h	2;"	d
EXECUTABLE	encryptor/Makefile	/^EXECUTABLE = encryption_tool$/;"	m
Epoll	ThreadPool/include/Epoll.h	/^class Epoll {$/;"	c
Epoll	ThreadPool/src/Epoll.cpp	/^Epoll::Epoll(int maxEvents) : events(maxEvents) { \/\/ Constructor with maxEvents as parameter$/;"	f	class:Epoll
FILE_HANDLER_H	compression/include/FileHandler.h	2;"	d
Faces	sqlProject/schema.sql	/^CREATE TABLE Faces ($/;"	t
Faces.age_estimate	sqlProject/schema.sql	/^    age_estimate INT,$/;"	F
Faces.confidence_score	sqlProject/schema.sql	/^    confidence_score FLOAT CHECK (confidence_score >= 0 AND confidence_score <= 1),$/;"	F
Faces.id	sqlProject/schema.sql	/^    id INT PRIMARY KEY AUTO_INCREMENT,$/;"	F
Faces.idx_faces_image_id	sqlProject/schema.sql	/^CREATE INDEX idx_faces_image_id ON Faces(image_id);$/;"	i
Faces.idx_person_name	sqlProject/schema.sql	/^CREATE INDEX idx_person_name ON Faces(person_name);$/;"	i
Faces.image_id	sqlProject/schema.sql	/^    image_id INT,$/;"	F
Faces.person_name	sqlProject/schema.sql	/^    person_name VARCHAR(100),$/;"	F
FileHandler	compression/include/FileHandler.h	/^class FileHandler {$/;"	c
GAMELOG_H	ChessAI/include/gamelog.h	2;"	d
GAME_H	ChessAI/include/game.h	2;"	d
GLOBAL_STATE_H	ThreadPool/include/GlobalState.h	3;"	d
GUI_H	encryptor/gui.h	2;"	d
Game	ChessAI/include/game.h	/^class Game {$/;"	c
GameLog	ChessAI/include/gamelog.h	/^class GameLog{$/;"	c
HUFFMAN_H	compression/include/Huffman.h	2;"	d
Huffman	compression/include/Huffman.h	/^class Huffman {$/;"	c
Huffman	compression/src/Huffman.cpp	/^Huffman::Huffman() {$/;"	f	class:Huffman
HuffmanNode	compression/include/Huffman.h	/^    HuffmanNode(char ch, int freq) : character(ch), frequency(freq), left(nullptr), right(nullptr) {}$/;"	f	struct:HuffmanNode
HuffmanNode	compression/include/Huffman.h	/^struct HuffmanNode {$/;"	s
Human	ChessAI/include/player.h	/^    Human,$/;"	m	class:Player
INC_DIR	ThreadPool/Makefile	/^INC_DIR = include$/;"	m
INC_DIR	compression/Makefile	/^INC_DIR = include$/;"	m
INC_DIR	mediaPlayer/Makefile	/^INC_DIR = include$/;"	m
IP	ThreadPool/include/Constants.h	/^    const std::string IP = "ip";$/;"	m	namespace:constants
Image_Tags	sqlProject/schema.sql	/^CREATE TABLE Image_Tags ($/;"	t
Image_Tags.idx_image_tags	sqlProject/schema.sql	/^CREATE INDEX idx_image_tags ON Image_Tags(image_id, tag_id);$/;"	i
Image_Tags.image_id	sqlProject/schema.sql	/^    image_id INT,$/;"	F
Image_Tags.tag_id	sqlProject/schema.sql	/^    tag_id INT,$/;"	F
Images	sqlProject/schema.sql	/^CREATE TABLE Images ($/;"	t
Images.camera_model	sqlProject/schema.sql	/^    camera_model VARCHAR(100),$/;"	F
Images.date_taken	sqlProject/schema.sql	/^    date_taken DATE NOT NULL,$/;"	F
Images.file_path	sqlProject/schema.sql	/^    file_path VARCHAR(255) NOT NULL,$/;"	F
Images.format	sqlProject/schema.sql	/^    format VARCHAR(50)$/;"	F
Images.id	sqlProject/schema.sql	/^    id INT PRIMARY KEY AUTO_INCREMENT,$/;"	F
Images.idx_camera_model	sqlProject/schema.sql	/^CREATE INDEX idx_camera_model ON Images(camera_model);$/;"	i
Images.idx_date_taken	sqlProject/schema.sql	/^CREATE INDEX idx_date_taken ON Images(date_taken);$/;"	i
Images.idx_tag_name	sqlProject/schema.sql	/^CREATE INDEX idx_tag_name ON Images(date_taken);$/;"	i
Images.location	sqlProject/schema.sql	/^    location VARCHAR(100),$/;"	F
Images.resolution	sqlProject/schema.sql	/^    resolution VARCHAR(20),$/;"	F
KING_H	ChessAI/include/king.h	2;"	d
KNIGHT_H	ChessAI/include/knight.h	2;"	d
King	ChessAI/include/king.h	/^class King : public ChessPiece {$/;"	c
Knight	ChessAI/include/knight.h	/^class Knight : public ChessPiece {$/;"	c
LDFLAGS	encryptor/Makefile	/^LDFLAGS = -L\/usr\/lib -lfltk -lssl -lcrypto$/;"	m
LDFLAGS	mediaPlayer/Makefile	/^LDFLAGS = -L\/usr\/lib -lfltk -lavcodec -lavformat -lavutil -lswscale -lswresample -lavdevice$/;"	m
LIBS	AlgorithmVisualizer/Makefile	/^LIBS = -lsfml-graphics -lsfml-window -lsfml-system$/;"	m
LZW	compression/include/LZW.h	/^class LZW {$/;"	c
LZW_H	compression/include/LZW.h	2;"	d
MAINWINDOW_H	Notepad/include/mainwindow.h	2;"	d
MAX_EVENTS	ThreadPool/include/Constants.h	/^    const std::string MAX_EVENTS = "max_events";$/;"	m	namespace:constants
MOVEVALIDATOR_H	ChessAI/include/movevalidator.h	2;"	d
MOVE_H	ChessAI/include/move.h	2;"	d
MainWindow	Notepad/include/mainwindow.h	/^class MainWindow : public QMainWindow$/;"	c
MainWindow	Notepad/src/mainwindow.cpp	/^MainWindow::MainWindow(QWidget *parent)$/;"	f	class:MainWindow
MediaPlayer	mediaPlayer/include/player.h	/^class MediaPlayer {$/;"	c
MediaPlayer	mediaPlayer/src/player.cpp	/^MediaPlayer::MediaPlayer() : isPlaying(false), formatContext(nullptr), codecContext(nullptr), frame(nullptr), swsContext(nullptr), rgbFrame(nullptr), rgbBuffer(nullptr) {$/;"	f	class:MediaPlayer
Move	ChessAI/include/move.h	/^    Move(int fromRow, int fromCol, int toRow, int toCol, ChessPiece* moved, $/;"	f	struct:Move
Move	ChessAI/include/move.h	/^struct Move$/;"	s
MoveValidator	ChessAI/include/movevalidator.h	/^class MoveValidator{$/;"	c
MyGUI	encryptor/gui.cpp	/^MyGUI::MyGUI() {$/;"	f	class:MyGUI
MyGUI	encryptor/gui.h	/^class MyGUI {$/;"	c
OBJECTS	ThreadPool/Makefile	/^OBJECTS = $(patsubst $(SRC_DIR)\/%.cpp,$(BIN_DIR)\/%.o,$(SOURCES))  # Generate object file names from source files$/;"	m
OBJECTS	mediaPlayer/Makefile	/^OBJECTS = $(patsubst $(SRC_DIR)\/%.cpp,$(BIN_DIR)\/%.o,$(SOURCES))$/;"	m
OBJS	AlgorithmVisualizer/Makefile	/^OBJS = $(patsubst $(SRC_DIR)\/%.cpp, $(OBJ_DIR)\/%.o, $(SRCS))$/;"	m
OBJ_DIR	AlgorithmVisualizer/Makefile	/^OBJ_DIR = obj$/;"	m
OBJ_DIR	compression/Makefile	/^OBJ_DIR = obj$/;"	m
OBJ_FILES	compression/Makefile	/^OBJ_FILES = $(SRC_FILES:$(SRC_DIR)\/%.cpp=$(OBJ_DIR)\/%.o)$/;"	m
PATHFINDINGVISUALIZER_H	AlgorithmVisualizer/src/PathfindingVisualizer.h	2;"	d
PAWN_H	ChessAI/include/pawn.h	2;"	d
PLAYER_H	ChessAI/include/player.h	2;"	d
PLAYER_H	mediaPlayer/include/player.h	2;"	d
POLL_TIMEOUT_MS	ThreadPool/include/Constants.h	/^    const std::string POLL_TIMEOUT_MS = "poll_timeout_ms";$/;"	m	namespace:constants
PORT	ThreadPool/include/Constants.h	/^    const std::string PORT = "port";$/;"	m	namespace:constants
PathfindingVisualizer	AlgorithmVisualizer/src/PathfindingVisualizer.cpp	/^PathfindingVisualizer::PathfindingVisualizer(int windowWidth, int windowHeight) $/;"	f	class:PathfindingVisualizer
PathfindingVisualizer	AlgorithmVisualizer/src/PathfindingVisualizer.h	/^class PathfindingVisualizer {$/;"	c
Pawn	ChessAI/include/pawn.h	/^class Pawn : public ChessPiece{$/;"	c
Player	ChessAI/include/player.h	/^enum class Player{$/;"	c
QUEEN_H	ChessAI/include/queen.h	2;"	d
Queen	ChessAI/include/queen.h	/^class Queen : public ChessPiece {$/;"	c
ROOK_H	ChessAI/include/rook.h	2;"	d
RSAENCRYPTOR_H	encryptor/rsaEncryptor.h	2;"	d
RSAEncryptor	encryptor/rsaEncryptor.cpp	/^RSAEncryptor::RSAEncryptor() : privateRSA(nullptr), publicRSA(nullptr) {}$/;"	f	class:RSAEncryptor
RSAEncryptor	encryptor/rsaEncryptor.h	/^class RSAEncryptor {$/;"	c
Rook	ChessAI/include/rook.h	/^class Rook : public ChessPiece{$/;"	c
SERVER	ThreadPool/include/Constants.h	/^    const std::string SERVER = "server";$/;"	m	namespace:constants
SERVER_H	ThreadPool/include/Server.h	2;"	d
SORTING_VISUALIZER_H	AlgorithmVisualizer/src/SortingVisualizer.h	2;"	d
SOURCES	ThreadPool/Makefile	/^SOURCES = $(wildcard $(SRC_DIR)\/*.cpp)                  # Get a list of all .cpp files in the SRC_DIR$/;"	m
SOURCES	encryptor/Makefile	/^SOURCES = main.cpp gui.cpp rsaEncryptor.cpp$/;"	m
SOURCES	mediaPlayer/Makefile	/^SOURCES = $(wildcard $(SRC_DIR)\/*.cpp)$/;"	m
SRCS	AlgorithmVisualizer/Makefile	/^SRCS = $(wildcard $(SRC_DIR)\/*.cpp)$/;"	m
SRC_DIR	AlgorithmVisualizer/Makefile	/^SRC_DIR = src$/;"	m
SRC_DIR	ThreadPool/Makefile	/^SRC_DIR = src$/;"	m
SRC_DIR	compression/Makefile	/^SRC_DIR = src$/;"	m
SRC_DIR	mediaPlayer/Makefile	/^SRC_DIR = src$/;"	m
SRC_FILES	compression/Makefile	/^SRC_FILES = $(wildcard $(SRC_DIR)\/*.cpp)$/;"	m
Server	ThreadPool/include/Server.h	/^class Server {$/;"	c
SortingVisualizer	AlgorithmVisualizer/src/SortingVisualizer.cpp	/^SortingVisualizer::SortingVisualizer(int windowWidth, int windowHeight) $/;"	f	class:SortingVisualizer
SortingVisualizer	AlgorithmVisualizer/src/SortingVisualizer.h	/^class SortingVisualizer {$/;"	c
TARGET	AlgorithmVisualizer/Makefile	/^TARGET = $(BIN_DIR)\/AlgorithmVisualizer$/;"	m
TARGET	compression/Makefile	/^TARGET = $(BIN_DIR)\/FileCompressionTool$/;"	m
TARGET	mediaPlayer/Makefile	/^TARGET = $(BIN_DIR)\/MediaPlayer$/;"	m
THREAD_COUNT	ThreadPool/include/Constants.h	/^    const std::string THREAD_COUNT = "thread_count"; \/\/ Added for thread count$/;"	m	namespace:constants
Tags	sqlProject/schema.sql	/^CREATE TABLE Tags ($/;"	t
Tags.id	sqlProject/schema.sql	/^    id INT PRIMARY KEY AUTO_INCREMENT,$/;"	F
Tags.tag_name	sqlProject/schema.sql	/^    tag_name VARCHAR(50) NOT NULL UNIQUE$/;"	F
Ui	Notepad/include/mainwindow.h	/^namespace Ui {$/;"	n
_file_path	Notepad/include/mainwindow.h	/^    QString _file_path;$/;"	m	class:MainWindow
addFd	ThreadPool/src/Epoll.cpp	/^void Epoll::addFd(int fd) { \/\/ Method to add a file descriptor to the epoll instance$/;"	f	class:Epoll
ai	ChessAI/include/game.h	/^        AI ai;$/;"	m	class:Game
board	ChessAI/include/ai.h	/^    ChessBoard* board;$/;"	m	class:AI
board	ChessAI/include/chessboard.h	/^    std::vector<std::vector<std::unique_ptr<ChessPiece>>> board; \/\/ 2D vector to hold chess pieces$/;"	m	class:ChessBoard
board	ChessAI/include/game.h	/^        ChessBoard board;$/;"	m	class:Game
buildHuffmanTree	compression/src/Huffman.cpp	/^void Huffman::buildHuffmanTree(const std::string& input) {$/;"	f	class:Huffman
capturedPiece	ChessAI/include/move.h	/^    ChessPiece* capturedPiece; \/\/ Pointer to any captured piece (nullptr if no capture)$/;"	m	struct:Move
character	compression/include/Huffman.h	/^    char character;$/;"	m	struct:HuffmanNode
cleanup	mediaPlayer/src/player.cpp	/^void MediaPlayer::cleanup() {$/;"	f	class:MediaPlayer
closeTab	Notepad/src/mainwindow.cpp	/^void MainWindow::closeTab(int index)$/;"	f	class:MainWindow
codecContext	mediaPlayer/include/player.h	/^    AVCodecContext* codecContext;$/;"	m	class:MediaPlayer
compress	compression/src/Huffman.cpp	/^void Huffman::compress(const std::string& inputFile, const std::string& outputFile) {$/;"	f	class:Huffman
compress	compression/src/LZW.cpp	/^void LZW::compress(const std::string& inputFile, const std::string& outputFile) {$/;"	f	class:LZW
config	ThreadPool/include/Config.h	/^    YAML::Node config;$/;"	m	class:Config
constants	ThreadPool/include/Constants.h	/^namespace constants {$/;"	n
currentFile	mediaPlayer/include/player.h	/^    std::string currentFile;$/;"	m	class:MediaPlayer
currentPlayer	ChessAI/include/game.h	/^        Player currentPlayer;$/;"	m	class:Game
decode	compression/src/Huffman.cpp	/^void Huffman::decode(const std::string& encoded) {$/;"	f	class:Huffman
decodeThread	mediaPlayer/include/player.h	/^    std::thread decodeThread;$/;"	m	class:MediaPlayer
decodeVideo	mediaPlayer/src/player.cpp	/^void MediaPlayer::decodeVideo(const std::string& filePath) {$/;"	f	class:MediaPlayer
decodedString	compression/include/Huffman.h	/^    std::string decodedString;$/;"	m	class:Huffman
decompress	compression/src/Huffman.cpp	/^void Huffman::decompress(const std::string& inputFile, const std::string& outputFile) {$/;"	f	class:Huffman
decompress	compression/src/LZW.cpp	/^void LZW::decompress(const std::string& inputFile, const std::string& outputFile) {$/;"	f	class:LZW
decryptButton	encryptor/gui.h	/^    Fl_Button *decryptButton;            \/\/ Button to trigger decryption$/;"	m	class:MyGUI
decryptCallback	encryptor/gui.cpp	/^void MyGUI::decryptCallback(Fl_Widget *widget, void *data) {$/;"	f	class:MyGUI
destroyTree	compression/src/Huffman.cpp	/^void Huffman::destroyTree(HuffmanNode* node) {$/;"	f	class:Huffman
dijkstra	AlgorithmVisualizer/src/PathfindingVisualizer.cpp	/^void PathfindingVisualizer::dijkstra(const std::vector<std::vector<int>>& graph, int src) {$/;"	f	class:PathfindingVisualizer
displayBox	mediaPlayer/include/player.h	/^    Fl_Box* displayBox;$/;"	m	class:MediaPlayer
drawArray	AlgorithmVisualizer/src/SortingVisualizer.cpp	/^void SortingVisualizer::drawArray(const std::vector<int>& arr) {$/;"	f	class:SortingVisualizer
drawGraph	AlgorithmVisualizer/src/PathfindingVisualizer.cpp	/^void PathfindingVisualizer::drawGraph(const std::vector<std::vector<int>>& graph, const std::vector<int>& dist, int current) {$/;"	f	class:PathfindingVisualizer
encodedString	compression/include/Huffman.h	/^    std::string encodedString;$/;"	m	class:Huffman
encrypt	encryptor/rsaEncryptor.cpp	/^std::string RSAEncryptor::encrypt(const std::string &plainText, const std::string &publicKeyFile) {$/;"	f	class:RSAEncryptor
encryptButton	encryptor/gui.h	/^    Fl_Button *encryptButton;            \/\/ Button to trigger encryption$/;"	m	class:MyGUI
encryptCallback	encryptor/gui.cpp	/^void MyGUI::encryptCallback(Fl_Widget *widget, void *data) {$/;"	f	class:MyGUI
epollFd	ThreadPool/include/Epoll.h	/^    int epollFd;$/;"	m	class:Epoll
events	ThreadPool/include/Epoll.h	/^    std::vector<struct epoll_event> events;$/;"	m	class:Epoll
font	AlgorithmVisualizer/src/SortingVisualizer.h	/^    sf::Font font;$/;"	m	class:SortingVisualizer
formatContext	mediaPlayer/include/player.h	/^    AVFormatContext* formatContext;$/;"	m	class:MediaPlayer
frame	mediaPlayer/include/player.h	/^    AVFrame* frame;$/;"	m	class:MediaPlayer
frequency	compression/include/Huffman.h	/^    int frequency;$/;"	m	struct:HuffmanNode
from	ChessAI/include/move.h	/^    std::pair <int, int> from; \/\/ Starting position (row,column)$/;"	m	struct:Move
gameLog	ChessAI/include/chessboard.h	/^    GameLog gameLog; \/\/ Object for logging game actions$/;"	m	class:ChessBoard
generateCodes	compression/src/Huffman.cpp	/^void Huffman::generateCodes(HuffmanNode* root, const std::string& code) {$/;"	f	class:Huffman
generateKeys	encryptor/rsaEncryptor.cpp	/^bool RSAEncryptor::generateKeys(const std::string &publicKeyFile, const std::string &privateKeyFile) {$/;"	f	class:RSAEncryptor
getBacklogSize	ThreadPool/src/Config.cpp	/^int Config::getBacklogSize() const {$/;"	f	class:Config
getBestMove	ChessAI/src/ai.cpp	/^Move AI::getBestMove(){$/;"	f	class:AI
getBoard	ChessAI/include/chessboard.h	/^    const std::vector<std::vector<std::unique_ptr<ChessPiece>>>& getBoard() const { return board; }$/;"	f	class:ChessBoard
getBufferSize	ThreadPool/src/Config.cpp	/^int Config::getBufferSize() const {$/;"	f	class:Config
getClientIP	ThreadPool/src/Config.cpp	/^std::string Config::getClientIP() const {$/;"	f	class:Config
getClientPort	ThreadPool/src/Config.cpp	/^int Config::getClientPort() const {$/;"	f	class:Config
getGameLog	ChessAI/include/chessboard.h	/^    const GameLog& getGameLog() const { return gameLog; }$/;"	f	class:ChessBoard
getMaxEvents	ThreadPool/src/Config.cpp	/^int Config::getMaxEvents() const {$/;"	f	class:Config
getPollTimeout	ThreadPool/src/Config.cpp	/^int Config::getPollTimeout() const {$/;"	f	class:Config
getServerIP	ThreadPool/src/Config.cpp	/^std::string Config::getServerIP() const {$/;"	f	class:Config
getServerPort	ThreadPool/src/Config.cpp	/^int Config::getServerPort() const {$/;"	f	class:Config
getThreadCount	ThreadPool/src/Config.cpp	/^int Config::getThreadCount() const {$/;"	f	class:Config
getValidMoves	ChessAI/src/pawn.cpp	/^std::vector<std::pair<int, int>> Pawn::getValidMoves($/;"	f	class:Pawn
hasMoves	ChessAI/src/gamelog.cpp	/^bool GameLog::hasMoves() const {$/;"	f	class:GameLog
heapify	AlgorithmVisualizer/src/SortingVisualizer.cpp	/^void SortingVisualizer::heapify(std::vector<int>& arr, int n, int i) {$/;"	f	class:SortingVisualizer
huffmanCodes	compression/include/Huffman.h	/^    std::unordered_map<char, std::string> huffmanCodes;$/;"	m	class:Huffman
image_statistics	sqlProject/schema.sql	/^CREATE VIEW image_statistics AS$/;"	V
images_with_faces	sqlProject/schema.sql	/^CREATE VIEW images_with_faces AS$/;"	V
images_with_tags	sqlProject/schema.sql	/^CREATE VIEW images_with_tags AS$/;"	V
input	encryptor/gui.h	/^    Fl_Input *input;                     \/\/ Input field for plaintext or ciphertext$/;"	m	class:MyGUI
isCapture	ChessAI/include/move.h	/^    bool isCapture() const { return capturedPiece != nullptr;}$/;"	f	struct:Move
isPlaying	mediaPlayer/include/player.h	/^    std::atomic<bool> isPlaying;$/;"	m	class:MediaPlayer
left	compression/include/Huffman.h	/^    HuffmanNode* left;$/;"	m	struct:HuffmanNode
loadPrivateKey	encryptor/rsaEncryptor.h	/^    bool loadPrivateKey(const std::string &keyFile) {$/;"	f	class:RSAEncryptor
loadPublicKey	encryptor/rsaEncryptor.h	/^    bool loadPublicKey(const std::string &keyFile) {$/;"	f	class:RSAEncryptor
log	ChessAI/include/game.h	/^        GameLog log;$/;"	m	class:Game
main	AlgorithmVisualizer/src/main.cpp	/^int main() {$/;"	f
main	Notepad/src/main.cpp	/^int main(int argc, char *argv[])$/;"	f
main	ThreadPool/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	compression/src/main.cpp	/^int main() {$/;"	f
main	encryptor/main.cpp	/^int main() {$/;"	f
main	mediaPlayer/src/main.cpp	/^int main(int argc, char** argv) {$/;"	f
main	sarath.cpp	/^int main() {$/;"	f
main	yaml/load_yaml.cpp	/^int main() {$/;"	f
merge	AlgorithmVisualizer/src/SortingVisualizer.cpp	/^void SortingVisualizer::merge(std::vector<int>& arr, int left, int mid, int right) {$/;"	f	class:SortingVisualizer
mergeSort	AlgorithmVisualizer/src/SortingVisualizer.cpp	/^void SortingVisualizer::mergeSort(std::vector<int>& arr, int left, int right) {$/;"	f	class:SortingVisualizer
minHeap	compression/include/Huffman.h	/^    std::priority_queue<HuffmanNode*, std::vector<HuffmanNode*>, Compare> minHeap;$/;"	m	class:Huffman
moveHistory	ChessAI/include/gamelog.h	/^    std::stack<Move> moveHistory;$/;"	m	class:GameLog
moveValidator	ChessAI/include/chessboard.h	/^    MoveValidator moveValidator; \/\/ Object for validating moves$/;"	m	class:ChessBoard
movedPiece	ChessAI/include/move.h	/^    ChessPiece* movedPiece; \/\/ Pointer to the moved piece$/;"	m	struct:Move
on_actionAbout_Notepad_triggered	Notepad/src/mainwindow.cpp	/^void MainWindow::on_actionAbout_Notepad_triggered()$/;"	f	class:MainWindow
on_actionBGColorWindow_triggered	Notepad/src/mainwindow.cpp	/^void MainWindow::on_actionBGColorWindow_triggered()$/;"	f	class:MainWindow
on_actionBGColor_triggered	Notepad/src/mainwindow.cpp	/^void MainWindow::on_actionBGColor_triggered()$/;"	f	class:MainWindow
on_actionColor_triggered	Notepad/src/mainwindow.cpp	/^void MainWindow::on_actionColor_triggered()$/;"	f	class:MainWindow
on_actionCopy_triggered	Notepad/src/mainwindow.cpp	/^void MainWindow::on_actionCopy_triggered()$/;"	f	class:MainWindow
on_actionCut_triggered	Notepad/src/mainwindow.cpp	/^void MainWindow::on_actionCut_triggered()$/;"	f	class:MainWindow
on_actionNew_triggered	Notepad/src/mainwindow.cpp	/^void MainWindow::on_actionNew_triggered()$/;"	f	class:MainWindow
on_actionOpen_triggered	Notepad/src/mainwindow.cpp	/^void MainWindow::on_actionOpen_triggered()$/;"	f	class:MainWindow
on_actionPaste_triggered	Notepad/src/mainwindow.cpp	/^void MainWindow::on_actionPaste_triggered()$/;"	f	class:MainWindow
on_actionPrint_triggered	Notepad/src/mainwindow.cpp	/^void MainWindow::on_actionPrint_triggered()$/;"	f	class:MainWindow
on_actionRedo_triggered	Notepad/src/mainwindow.cpp	/^void MainWindow::on_actionRedo_triggered()$/;"	f	class:MainWindow
on_actionSave_As_triggered	Notepad/src/mainwindow.cpp	/^void MainWindow::on_actionSave_As_triggered()$/;"	f	class:MainWindow
on_actionSave_triggered	Notepad/src/mainwindow.cpp	/^void MainWindow::on_actionSave_triggered()$/;"	f	class:MainWindow
on_actionType_triggered	Notepad/src/mainwindow.cpp	/^void MainWindow::on_actionType_triggered()$/;"	f	class:MainWindow
on_actionUndo_triggered	Notepad/src/mainwindow.cpp	/^void MainWindow::on_actionUndo_triggered()$/;"	f	class:MainWindow
operator ()	compression/include/Huffman.h	/^    bool operator()(HuffmanNode* left, HuffmanNode* right) {$/;"	f	struct:Compare
output	encryptor/gui.h	/^    Fl_Text_Display *output;             \/\/ Output field for displaying results$/;"	m	class:MyGUI
override	ChessAI/include/bishop.h	/^    std::vector<std::pair<int, int>> getValidMoves(const ChessBoard* board, int row, int col) const override;$/;"	m	class:Bishop
override	ChessAI/include/king.h	/^    std::vector<std::pair<int, int>> getValidMoves(const ChessBoard* board, int row, int col) const override;$/;"	m	class:King
override	ChessAI/include/knight.h	/^    std::vector<std::pair<int, int>> getValidMoves(const ChessBoard* board, int row, int col) const override;$/;"	m	class:Knight
override	ChessAI/include/pawn.h	/^            int row, int col) const override;$/;"	m	class:Pawn
override	ChessAI/include/queen.h	/^    std::vector<std::pair<int, int>> getValidMoves(const ChessBoard* board, int row, int col) const override;$/;"	m	class:Queen
override	ChessAI/include/rook.h	/^            int row, int col) const override;$/;"	m	class:Rook
partition	AlgorithmVisualizer/src/SortingVisualizer.cpp	/^int SortingVisualizer::partition(std::vector<int>& arr, int low, int high) {$/;"	f	class:SortingVisualizer
playButton	mediaPlayer/include/player.h	/^    Fl_Button* playButton;$/;"	m	class:MediaPlayer
playMedia	mediaPlayer/src/player.cpp	/^void MediaPlayer::playMedia(const std::string& filePath) {$/;"	f	class:MediaPlayer
play_cb	mediaPlayer/src/player.cpp	/^void MediaPlayer::play_cb(Fl_Widget* w, void* data) {$/;"	f	class:MediaPlayer
privateRSA	encryptor/rsaEncryptor.h	/^    RSA *privateRSA; \/\/ Private key$/;"	m	class:RSAEncryptor
publicRSA	encryptor/rsaEncryptor.h	/^    RSA *publicRSA;  \/\/ Public key$/;"	m	class:RSAEncryptor
quickSort	AlgorithmVisualizer/src/SortingVisualizer.cpp	/^void SortingVisualizer::quickSort(std::vector<int>& arr, int low, int high) {$/;"	f	class:SortingVisualizer
readCompressedFile	compression/src/Huffman.cpp	/^void Huffman::readCompressedFile(const std::string& inputFile) {$/;"	f	class:Huffman
readFile	compression/src/FileHandler.cpp	/^std::string FileHandler::readFile(const std::string& filename) {$/;"	f	class:FileHandler
recordMove	ChessAI/src/gamelog.cpp	/^void GameLog::recordMove(const Move& move){$/;"	f	class:GameLog
removeFd	ThreadPool/src/Epoll.cpp	/^void Epoll::removeFd(int fd) { \/\/ Method to remove a file descriptor from the epoll instance$/;"	f	class:Epoll
rgbBuffer	mediaPlayer/include/player.h	/^    uint8_t* rgbBuffer;$/;"	m	class:MediaPlayer
rgbFrame	mediaPlayer/include/player.h	/^    AVFrame* rgbFrame;$/;"	m	class:MediaPlayer
right	compression/include/Huffman.h	/^    HuffmanNode* right;$/;"	m	struct:HuffmanNode
searchDepth	ChessAI/include/ai.h	/^    int searchDepth;$/;"	m	class:AI
sendResponse	ThreadPool/src/Server.cpp	/^void Server::sendResponse(int client_fd, const std::string& message) {$/;"	f	class:Server
show	encryptor/gui.cpp	/^void MyGUI::show() {$/;"	f	class:MyGUI
signalHandler	ThreadPool/src/Server.cpp	/^void signalHandler(int signum) {$/;"	f
start	ThreadPool/src/Client.cpp	/^void Client::start() {$/;"	f	class:Client
start	ThreadPool/src/Server.cpp	/^void Server::start() { \/\/ Method to start the server$/;"	f	class:Server
stopButton	mediaPlayer/include/player.h	/^    Fl_Button* stopButton;$/;"	m	class:MediaPlayer
stopMedia	mediaPlayer/src/player.cpp	/^void MediaPlayer::stopMedia() {$/;"	f	class:MediaPlayer
stop_cb	mediaPlayer/src/player.cpp	/^void MediaPlayer::stop_cb(Fl_Widget* w, void* data) {$/;"	f	class:MediaPlayer
swsContext	mediaPlayer/include/player.h	/^    SwsContext* swsContext;$/;"	m	class:MediaPlayer
tabFilePaths	Notepad/include/mainwindow.h	/^    QMap<int, QString>tabFilePaths;$/;"	m	class:MainWindow
tabWidget	Notepad/include/mainwindow.h	/^    QTabWidget *tabWidget;$/;"	m	class:MainWindow
to	ChessAI/include/move.h	/^    std::pair <int, int> to; \/\/Ending position (row, column)$/;"	m	struct:Move
ui	Notepad/include/mainwindow.h	/^    Ui::MainWindow *ui;$/;"	m	class:MainWindow
undoMove	ChessAI/src/gamelog.cpp	/^Move GameLog::undoMove() {$/;"	f	class:GameLog
updateDisplay	mediaPlayer/src/player.cpp	/^void MediaPlayer::updateDisplay(void* data) {$/;"	f	class:MediaPlayer
validator	ChessAI/include/game.h	/^        MoveValidator validator;$/;"	m	class:Game
visualizeBubbleSort	AlgorithmVisualizer/src/SortingVisualizer.cpp	/^void SortingVisualizer::visualizeBubbleSort(std::vector<int>& arr) {$/;"	f	class:SortingVisualizer
visualizeDijkstra	AlgorithmVisualizer/src/PathfindingVisualizer.cpp	/^void PathfindingVisualizer::visualizeDijkstra() {$/;"	f	class:PathfindingVisualizer
visualizeHeapSort	AlgorithmVisualizer/src/SortingVisualizer.cpp	/^void SortingVisualizer::visualizeHeapSort(std::vector<int>& arr) {$/;"	f	class:SortingVisualizer
visualizeMergeSort	AlgorithmVisualizer/src/SortingVisualizer.cpp	/^void SortingVisualizer::visualizeMergeSort(std::vector<int>& arr) {$/;"	f	class:SortingVisualizer
visualizeQuickSort	AlgorithmVisualizer/src/SortingVisualizer.cpp	/^void SortingVisualizer::visualizeQuickSort(std::vector<int>& arr) {$/;"	f	class:SortingVisualizer
waitForEvents	ThreadPool/src/Epoll.cpp	/^std::vector<int> Epoll::waitForEvents(int timeout) { \/\/ Method to wait for events on monitored file descriptors$/;"	f	class:Epoll
window	AlgorithmVisualizer/src/PathfindingVisualizer.h	/^    sf::RenderWindow window;$/;"	m	class:PathfindingVisualizer
window	AlgorithmVisualizer/src/SortingVisualizer.h	/^    sf::RenderWindow window;$/;"	m	class:SortingVisualizer
window	encryptor/gui.h	/^    Fl_Window *window;                   \/\/ Main window$/;"	m	class:MyGUI
window	mediaPlayer/include/player.h	/^    Fl_Window* window;$/;"	m	class:MediaPlayer
windowHeight	AlgorithmVisualizer/src/PathfindingVisualizer.h	/^    int windowHeight;$/;"	m	class:PathfindingVisualizer
windowHeight	AlgorithmVisualizer/src/SortingVisualizer.h	/^    int windowHeight;$/;"	m	class:SortingVisualizer
windowWidth	AlgorithmVisualizer/src/PathfindingVisualizer.h	/^    int windowWidth;$/;"	m	class:PathfindingVisualizer
windowWidth	AlgorithmVisualizer/src/SortingVisualizer.h	/^    int windowWidth;$/;"	m	class:SortingVisualizer
writeCompressedFile	compression/src/Huffman.cpp	/^void Huffman::writeCompressedFile(const std::string& outputFile) {$/;"	f	class:Huffman
writeDecompressedFile	compression/src/Huffman.cpp	/^void Huffman::writeDecompressedFile(const std::string& outputFile) {$/;"	f	class:Huffman
writeFile	compression/src/FileHandler.cpp	/^void FileHandler::writeFile(const std::string& filename, const std::string& content) {$/;"	f	class:FileHandler
~Epoll	ThreadPool/src/Epoll.cpp	/^Epoll::~Epoll() { \/\/ Destructor$/;"	f	class:Epoll
~MainWindow	Notepad/src/mainwindow.cpp	/^MainWindow::~MainWindow()$/;"	f	class:MainWindow
~MediaPlayer	mediaPlayer/src/player.cpp	/^MediaPlayer::~MediaPlayer() {$/;"	f	class:MediaPlayer
~RSAEncryptor	encryptor/rsaEncryptor.cpp	/^RSAEncryptor::~RSAEncryptor() {$/;"	f	class:RSAEncryptor
