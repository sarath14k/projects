!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BACKLOG_SIZE	include/Constants.h	/^    const std::string BACKLOG_SIZE = "backlog_size";$/;"	m	namespace:constants
BIN_DIR	Makefile	/^BIN_DIR = bin$/;"	m
BUFFER_SIZE	include/Constants.h	/^    const std::string BUFFER_SIZE = "buffer_size";$/;"	m	namespace:constants
CC	Makefile	/^CC = g++$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -g$/;"	m
CLIENT	include/Constants.h	/^    const std::string CLIENT = "client";$/;"	m	namespace:constants
CLIENT_H	include/Client.h	2;"	d
CONFIG	Makefile	/^CONFIG = config.yaml$/;"	m
CONFIG_FILE_PATH	include/Constants.h	/^    const std::string CONFIG_FILE_PATH = "config\/config.yaml"; \/\/ Path to the configuration file$/;"	m	namespace:constants
CONFIG_H	include/Config.h	2;"	d
CONSTANT_H	include/Constants.h	2;"	d
Client	include/Client.h	/^class Client {$/;"	c
Config	include/Config.h	/^class Config {$/;"	c
Config	src/Config.cpp	/^Config::Config(const std::string& filename) {$/;"	f	class:Config
EPOLL_H	include/Epoll.h	2;"	d
Epoll	include/Epoll.h	/^class Epoll {$/;"	c
Epoll	src/Epoll.cpp	/^Epoll::Epoll(int maxEvents) : events(maxEvents) { \/\/ Constructor with maxEvents as parameter$/;"	f	class:Epoll
GLOBAL_STATE_H	include/GlobalState.h	3;"	d
INC_DIR	Makefile	/^INC_DIR = include$/;"	m
IP	include/Constants.h	/^    const std::string IP = "ip";$/;"	m	namespace:constants
MAX_EVENTS	include/Constants.h	/^    const std::string MAX_EVENTS = "max_events";$/;"	m	namespace:constants
OBJECTS	Makefile	/^OBJECTS = $(patsubst $(SRC_DIR)\/%.cpp,$(BIN_DIR)\/%.o,$(SOURCES))  # Generate object file names from source files$/;"	m
POLL_TIMEOUT_MS	include/Constants.h	/^    const std::string POLL_TIMEOUT_MS = "poll_timeout_ms";$/;"	m	namespace:constants
PORT	include/Constants.h	/^    const std::string PORT = "port";$/;"	m	namespace:constants
SERVER	include/Constants.h	/^    const std::string SERVER = "server";$/;"	m	namespace:constants
SERVER_H	include/Server.h	2;"	d
SOURCES	Makefile	/^SOURCES = $(wildcard $(SRC_DIR)\/*.cpp)                  # Get a list of all .cpp files in the SRC_DIR$/;"	m
SRC_DIR	Makefile	/^SRC_DIR = src$/;"	m
Server	include/Server.h	/^class Server {$/;"	c
THREAD_COUNT	include/Constants.h	/^    const std::string THREAD_COUNT = "thread_count"; \/\/ Added for thread count$/;"	m	namespace:constants
addFd	src/Epoll.cpp	/^void Epoll::addFd(int fd) { \/\/ Method to add a file descriptor to the epoll instance$/;"	f	class:Epoll
config	include/Config.h	/^    YAML::Node config;$/;"	m	class:Config
constants	include/Constants.h	/^namespace constants {$/;"	n
epollFd	include/Epoll.h	/^    int epollFd;$/;"	m	class:Epoll
events	include/Epoll.h	/^    std::vector<struct epoll_event> events;$/;"	m	class:Epoll
getBacklogSize	src/Config.cpp	/^int Config::getBacklogSize() const {$/;"	f	class:Config
getBufferSize	src/Config.cpp	/^int Config::getBufferSize() const {$/;"	f	class:Config
getClientIP	src/Config.cpp	/^std::string Config::getClientIP() const {$/;"	f	class:Config
getClientPort	src/Config.cpp	/^int Config::getClientPort() const {$/;"	f	class:Config
getMaxEvents	src/Config.cpp	/^int Config::getMaxEvents() const {$/;"	f	class:Config
getPollTimeout	src/Config.cpp	/^int Config::getPollTimeout() const {$/;"	f	class:Config
getServerIP	src/Config.cpp	/^std::string Config::getServerIP() const {$/;"	f	class:Config
getServerPort	src/Config.cpp	/^int Config::getServerPort() const {$/;"	f	class:Config
getThreadCount	src/Config.cpp	/^int Config::getThreadCount() const {$/;"	f	class:Config
main	src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
removeFd	src/Epoll.cpp	/^void Epoll::removeFd(int fd) { \/\/ Method to remove a file descriptor from the epoll instance$/;"	f	class:Epoll
sendResponse	src/Server.cpp	/^void Server::sendResponse(int client_fd, const std::string& message) {$/;"	f	class:Server
signalHandler	src/Server.cpp	/^void signalHandler(int signum) {$/;"	f
start	src/Client.cpp	/^void Client::start() {$/;"	f	class:Client
start	src/Server.cpp	/^void Server::start() { \/\/ Method to start the server$/;"	f	class:Server
waitForEvents	src/Epoll.cpp	/^std::vector<int> Epoll::waitForEvents(int timeout) { \/\/ Method to wait for events on monitored file descriptors$/;"	f	class:Epoll
~Epoll	src/Epoll.cpp	/^Epoll::~Epoll() { \/\/ Destructor$/;"	f	class:Epoll
